package com.pig84.ab.utils;

import java.security.MessageDigest;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import org.json.JSONArray;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import com.pig84.ab.dao.impl.LoginAndRegisterDaoImpl;
import com.pig84.ab.vo.PassengerInfo;
import com.pig84.ab.weixin.util.JsonUtil;

/**
 * 汇理财接口调用类
 * @author gongxueting
 *
 */
public class HlcUtil {
	
	protected static final Logger logger = LoggerFactory.getLogger(HlcUtil.class);
	
	private static LoginAndRegisterDaoImpl dao=new LoginAndRegisterDaoImpl();
	
	/*汇理财注册*/
	public static String hlc_regist(PassengerInfo appUser){
		//调用汇理财注册接口
		String URL = PropertyManage.get("hlc_regist");
		String sendTime = String.valueOf(new Date().getTime());
		//加密串  sendTime + 双方约定key（huilc_key），拼接后MD5加密结果
		String signature=getMD5("huilc_key"+sendTime,null,0);
		logger.info("call hlc regist interface '{}' : '{}' : '{}'", appUser.getTelephone(),sendTime,signature);
		// We don't care whether message is successful
		String result=Http.postHttpReq(URL,"{'mobilePhone':'"+appUser.getTelephone()+"','sendTime':'"+sendTime+"','signature':'"+signature+"'}");
		//获取返回值
        String resultCode=JsonUtil.getJsonValue(result, "resultCode");
		//1：校验不过，非法调用
		//2：手机号码已经注册
		//3：程序处理异常
		//0000：成功
        return resultCode;
	}
	
	/*汇理财注册(优惠券发放规则中调用)*/
	public static String hlc_regist(String URL,PassengerInfo appUser){
		String sendTime = String.valueOf(new Date().getTime());
		//加密串  sendTime + 双方约定key（huilc_key），拼接后MD5加密结果
		String signature=HlcUtil.getMD5("huilc_key"+sendTime,null,0);
		logger.info("call hlc regist interface '{}' : '{}' : '{}'", appUser.getTelephone(),sendTime,signature);
		// We don't care whether message is successful
		String result=Http.postHttpReq(URL,"{'mobilePhone':'"+appUser.getTelephone()+"','sendTime':'"+sendTime+"','signature':'"+signature+"'}");
		//获取返回值
        String resultCode=JsonUtil.getJsonValue(result, "resultCode");
		//1：校验不过，非法调用
		//2：手机号码已经注册
		//3：程序处理异常
		//0000：成功
        return resultCode;
	}
	
	/*汇理财获取用户(spring定时调用)*/
	public void get_hlc_user(){
		//汇理财投资大于3000元，发放50元无门槛小猪上下班优惠券
		Event.TIMINGHANDLE.triggerAsynchronous("user", new PassengerInfo());
	}
	
	/*汇理财获取用户*/
	public static List<PassengerInfo> hlc_user(){
		//调用汇理财获取投资大于3000元用户的接口
		String URL = PropertyManage.get("hlc_user");
		String sendTime = String.valueOf(new Date().getTime());
		//加密串  sendTime + 双方约定key（huilc_key），拼接后MD5加密结果
		String signature=getMD5("huilc_key"+sendTime,null,0);
		logger.info("call hlc regist interface '{}' : '{}'", sendTime,signature);
		// We don't care whether message is successful
		String result=Http.postHttpReq(URL,"{'sendTime':'"+sendTime+"','signature':'"+signature+"'}");
		//获取返回值
        String resultCode=JsonUtil.getJsonValue(result, "resultCode");
        
        List<PassengerInfo> list=new ArrayList<PassengerInfo>();
        if("0000".equals(resultCode)){
        	//汇理财用户集合
        	List<String> hlcUserList=jsonToList((JSONArray)new JSONObject(result).get("investUsers"));
        	if(null!=hlcUserList&&hlcUserList.size()>0){
        		for (String string : hlcUserList) {
        			PassengerInfo appUser = dao.getPassengerByTel(string);
        			if(null!=appUser&&"0".equals(appUser.getFlag())){//用户存在
        				list.add(appUser);
            			new Message("【小猪巴士】尊敬的用户%s，汇理财赠送的50元上下班券已发放您的小猪账户，请查收！", appUser.getTelephone()).sendTo(appUser.getTelephone());
        			}
				}
        	}
		}
        return list;
	}
	
	/*json转换为list*/
	private static List<String> jsonToList(JSONArray jsonObject){
		List<String> l=new ArrayList<String>();
        for (int i = 0; i < jsonObject.length(); i++) {
        	l.add(JsonUtil.getJsonValue(jsonObject.get(i).toString(),"mobilePhone"));
		}
        return l;
	}
	
	/**
	 * MD5鍔犲瘑鏂规硶
	 * 
	 * @param str
	 * @param encoding
	 *            default UTF-8
	 * @param no_Lower_Upper
	 *            0,1,2 0锛氫笉鍖哄垎澶у皬鍐欙紝1锛氬皬鍐欙紝2锛氬ぇ鍐?
	 * @return MD5Str
	 */
	public static String getMD5(String str, String encoding, int no_Lower_Upper) {
		if (null == encoding)
			encoding = "utf-8";
		StringBuffer sb = new StringBuffer();
		try {
			MessageDigest md = MessageDigest.getInstance("MD5");
			byte[] array = md.digest(str.getBytes(encoding));
			for (int i = 0; i < array.length; i++) {
				sb.append(Integer.toHexString((array[i] & 0xFF) | 0x100)
						.toUpperCase().substring(1, 3));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		if (no_Lower_Upper == 0) {
			return sb.toString();
		}
		if (no_Lower_Upper == 1) {
			return sb.toString().toLowerCase();
		}
		if (no_Lower_Upper == 2) {
			return sb.toString().toUpperCase();
		}
		return null;
	}
	
	public static void main(String[] args) {
		String sendTime = String.valueOf(new Date().getTime());
		System.out.println(sendTime);
		String signature=getMD5("huilc_key1446199479844",null,0);
		System.out.println(signature);
	}
}
